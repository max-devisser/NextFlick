<project name="NextFlick" basedir="." default="main" xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="src.dir"     value="src"/>
    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir"     value="${build.dir}/jar"/>

    <property name="main-class"  value="${src.dir}/Controller"/>

	<property name="javadoc_absolute_path" location="javadoc"/>
	<property name="public_javadoc_absolute_path" location="../NextFlick_javadoc/javadoc"/>



    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

	<available classname="org.apache.ivy.Main" property="ivy.installed"/>
	
	<target name="install-ivy" description="Install ivy" unless="ivy.installed">
		<mkdir dir="${user.home}/.ant/lib"/>
		<get dest="${user.home}/.ant/lib/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar"/>
		<fail message="Ivy has been installed. Run the build again"/>
	</target>
	
	<target name="resolve" depends="install-ivy" description="Use ivy to resolve classpaths">
		<ivy:cachepath pathid="compile.path">
			<dependency org="com.google.code.gson" name="gson" rev="2.8.0"/>
			<dependency org="com.mashape.unirest" name="unirest-java" rev="1.4.9"/>
		</ivy:cachepath>
	</target>
			
    <target name="compile" depends="resolve" description="Compiles project">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false" classpathref="compile.path">
    		<classpath>
    			<pathelement location="${classes.dir}"/>
    			<pathelement location="lib/junit-4.12.jar"/>
    		</classpath>
        </javac>
    </target>

    <target name="jar" depends="compile" description="Generate jar file in build/jar directory">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
    </target>

    <target name="run" depends="jar">
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true"/>
    </target>

    <target name="clean-build" depends="clean,jar"/>

    <target name="main" depends="clean,run"/>
	
	<target name="javadoc" depends="compile" description="Generate javadoc">
	    <delete quiet="true">
	      <fileset dir="javadoc" />
	    </delete>
	    <javadoc destdir="javadoc">
	      <fileset dir="src" >
		      <include name="*.java"/>
	      </fileset>
	      <link href="https://docs.oracle.com/javase/8/docs/api/" />          
	    </javadoc>
	    <echo>                                                                                       
	      javadoc written to file://${javadoc_absolute_path}/index.html                              
	      copying to ${public_javadoc_absolute_path}/index.html                                      
	    </echo>                                                                                      
	    <delete quiet="true">                                                                        
	      <fileset dir="${public_javadoc_absolute_path}" />                                          
	    </delete>                                                                                    
	    <mkdir dir="${public_javadoc_absolute_path}" />                                              
	    <copy todir="${public_javadoc_absolute_path}">                                               
	      <fileset dir="javadoc" />                                                                  
	    </copy>                                                                                      
	    <echo>                                                                                       
	      javadoc copied to ${public_javadoc_absolute_path}/index.html                               
	      TO PUBLISH: cd into that repo, then git add javadoc;                                       
	        git commit -m "update javadoc"; git push origin gh-pages                                
	    </echo>                                                                                      
	  </target>    

</project>

<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson 
###Maven-formatted Gson dependency
<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.8.0</version>
</dependency>

-->
<!-- https://mvnrepository.com/artifact/com.mashape.unirest/unirest-java 
###Maven-formatted Unirest dependency
<dependency>
    <groupId>com.mashape.unirest</groupId>
    <artifactId>unirest-java</artifactId>
    <version>1.4.9</version>
</dependency>
-->
